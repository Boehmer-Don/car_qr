/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************!*\
  !*** ./src/new_label.ts ***!
  \**************************/
console.log('new_label.ts');
var suggestionContainers = document.querySelectorAll('.suggestion-container');
document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
        console.log('Escape pressed');
        suggestionContainers.forEach(function (container) {
            container.classList.add('hidden');
        });
    }
});
var makeContainer = document.querySelector('.make-container');
var modelContainer = document.querySelector('.model-container');
var trimContainer = document.querySelector('.trim-container');
var typeContainer = document.querySelector('.type-container');
var makeInput = document.querySelector('#make-1');
var modelInput = document.querySelector('#vehicle_model-1');
var trimInput = document.querySelector('#label-1-trim');
var typeInput = document.querySelector('#label-1-type');
var makeSuggestionP = document.querySelector('.make-suggestion');
var modelSuggestionP = document.querySelector('.model-suggestion');
var trimSuggestionP = document.querySelector('.trim-suggestion');
var typeSuggestionP = document.querySelector('.type-suggestion');
function selectMake() {
    var suggestionsGot = document.querySelectorAll('.make-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            console.log('Make suggestion clicked', e.target.innerHTML);
            makeInput.value = e.target.innerHTML.trim();
            makeContainer.classList.add('hidden');
            console.log('makeInput.value', makeInput.value);
            var models = [];
            fetch('/labels/get_models', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ makeSelected: makeInput.value }),
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                models.push.apply(models, data.models);
                modelContainer.innerHTML = '';
                models.forEach(function (model) {
                    var clonedModelSuggestionParagraph = modelSuggestionP.cloneNode(true);
                    clonedModelSuggestionParagraph.innerHTML = model;
                    modelContainer.appendChild(clonedModelSuggestionParagraph);
                });
            })
                .catch(function (error) {
                console.error('Error fetching models by make:', error);
            });
            modelInput.addEventListener('click', function (e) {
                modelContainer.classList.remove('hidden');
                selectModel();
            });
        });
    });
}
function selectModel() {
    var suggestionsGot = document.querySelectorAll('.model-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            console.log('Model suggestion clicked', e.target.innerHTML);
            modelInput.value = e.target.innerHTML.trim();
            modelContainer.classList.add('hidden');
            console.log('modelInput.value', modelInput.value);
            var trims = [];
            fetch('/labels/get_trims', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ modelSelected: modelInput.value }),
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                trims.push.apply(trims, data.trims);
                trimContainer.innerHTML = '';
                trims.forEach(function (trim) {
                    var clonedTrimSuggestionParagraph = trimSuggestionP.cloneNode(true);
                    clonedTrimSuggestionParagraph.innerHTML = trim;
                    trimContainer.appendChild(clonedTrimSuggestionParagraph);
                });
                makeInput.value = data.make;
                typeInput.value = data.type;
                selectTrim();
            })
                .catch(function (error) {
                console.error('Error fetching trims by model:', error);
            });
            modelInput.addEventListener('click', function (e) {
                modelContainer.classList.remove('hidden');
            });
        });
    });
}
function selectTrim() {
    var suggestionsGot = document.querySelectorAll('.trim-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            console.log('Trim suggestion clicked', e.target.innerHTML);
            trimInput.value = e.target.innerHTML.trim();
            trimContainer.classList.add('hidden');
            console.log('trimInput.value', trimInput.value);
        });
    });
}
function selectType() {
    var suggestionsGot = document.querySelectorAll('.type-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            console.log('Type suggestion clicked', e.target.innerHTML);
            typeInput.value = e.target.innerHTML;
            typeContainer.classList.add('hidden');
            console.log('typeInput.value', typeInput.value);
        });
    });
}
if (makeInput) {
    makeInput.addEventListener('input', function (e) {
        var makes = [];
        fetch('/labels/get_makes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ makeTyped: e.target.value }),
        })
            .then(function (res) { return res.json(); })
            .then(function (data) {
            makes.push.apply(makes, data.makes);
            makeContainer.classList.remove('hidden');
            makeContainer.innerHTML = '';
            makes.forEach(function (make) {
                var clonedMakeSuggestionParagraph = makeSuggestionP.cloneNode(true);
                clonedMakeSuggestionParagraph.innerHTML = make;
                makeContainer.appendChild(clonedMakeSuggestionParagraph);
            });
            selectMake();
        })
            .catch(function (error) {
            console.error('Error sending makes data to Flask:', error);
        });
    });
}
makeInput.addEventListener('click', function (e) {
    makeContainer.classList.toggle('hidden');
});
modelInput.addEventListener('click', function (e) {
    modelContainer.classList.toggle('hidden');
});
trimInput.addEventListener('click', function (e) {
    console.log('trimInput clicked');
    trimContainer.classList.toggle('hidden');
});
typeInput.addEventListener('click', function (e) {
    console.log('typeInput clicked');
    console.log(typeContainer);
    typeContainer.classList.toggle('hidden');
});
if (modelInput) {
    modelInput.addEventListener('input', function (e) {
        var models = [];
        fetch('/labels/get_models', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ modelTyped: modelInput.value }),
        })
            .then(function (response) { return response.json(); })
            .then(function (data) {
            models.push.apply(models, data.models);
            modelContainer.innerHTML = '';
            models.forEach(function (model) {
                var clonedModelSuggestionParagraph = modelSuggestionP.cloneNode(true);
                clonedModelSuggestionParagraph.innerHTML = model;
                modelContainer.appendChild(clonedModelSuggestionParagraph);
            });
            console.log('before SelectModel()');
            selectModel();
        })
            .catch(function (error) {
            console.error('Error fetching all models:', error);
        });
    });
}
selectMake();
selectModel();
selectTrim();
var labelForm = document.querySelector('#label-form');
var codeInput = document.querySelector('#label-1-sticker-number');
var codeError = document.querySelector('.sticker-code-error');
var isError = false;
if (codeInput) {
    codeInput.addEventListener('input', function (e) {
        console.log('codeInput.value', codeInput.value);
        fetch('/labels/check_label_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ codeTyped: codeInput.value }),
        })
            .then(function (response) { return response.json(); })
            .then(function (data) {
            console.log('data', data);
            if (data.exists === true) {
                codeError.classList.remove('hidden');
                codeInput.classList.add('text-red-700');
                codeInput.classList.add('border-2');
                codeInput.classList.add('bg-red-100');
                codeInput.classList.add('focus:border-red-700');
                isError = true;
            }
            else {
                codeError.classList.add('hidden');
                codeInput.classList.remove('text-red-700');
                codeInput.classList.remove('border-2');
                codeInput.classList.remove('bg-red-100');
                codeInput.classList.remove('focus:border-red-700');
                isError = false;
            }
        })
            .catch(function (error) {
            console.error('Error fetching sticker number:', error);
        });
    });
}
console.log('labelForm', labelForm);
console.log('isError', isError);
labelForm.addEventListener('submit', function (e) {
    console.log('isError', isError);
    if (isError) {
        e.preventDefault();
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,