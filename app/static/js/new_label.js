/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************!*\
  !*** ./src/new_label.ts ***!
  \**************************/
var suggestionContainers = document.querySelectorAll('.suggestion-container');
document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
        suggestionContainers.forEach(function (container) {
            container.classList.add('hidden');
        });
    }
});
var makeContainer = document.querySelector('.make-container');
var modelContainer = document.querySelector('.model-container');
var trimContainer = document.querySelector('.trim-container');
var typeContainer = document.querySelector('.type-container');
document.addEventListener('click', function (e) {
    if (!makeContainer.classList.contains('hidden') && e.target !== makeInput) {
        makeContainer.classList.add('hidden');
    }
    if (!modelContainer.classList.contains('hidden') && e.target !== modelInput) {
        modelContainer.classList.add('hidden');
    }
    if (!trimContainer.classList.contains('hidden') && e.target !== trimInput) {
        trimContainer.classList.add('hidden');
    }
    if (!typeContainer.classList.contains('hidden') && e.target !== typeInput) {
        typeContainer.classList.add('hidden');
    }
});
var makeInput = document.querySelector('#make-1');
var modelInput = document.querySelector('#vehicle_model-1');
var trimInput = document.querySelector('#label-1-trim');
var typeInput = document.querySelector('#label-1-type');
var makeWarning = document.querySelector('.make-warning');
var modelWarning = document.querySelector('.model-warning');
var makeSuggestionP = document.querySelector('.make-suggestion');
var modelSuggestionP = document.querySelector('.model-suggestion');
var trimSuggestionP = document.querySelector('.trim-suggestion');
var typeSuggestionP = document.querySelector('.type-suggestion');
function selectMake() {
    var suggestionsGot = document.querySelectorAll('.make-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            makeInput.value = e.target.innerHTML.trim();
            makeContainer.classList.add('hidden');
            var models = [];
            fetch('/labels/get_models', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ makeSelected: makeInput.value }),
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                models.push.apply(models, data.models);
                modelContainer.innerHTML = '';
                models.forEach(function (model) {
                    var clonedModelSuggestionParagraph = modelSuggestionP.cloneNode(true);
                    clonedModelSuggestionParagraph.innerHTML = model;
                    modelContainer.appendChild(clonedModelSuggestionParagraph);
                });
            })
                .catch(function (error) {
                console.error('Error fetching models by make:', error);
            });
            modelWarning.classList.add('hidden');
            modelInput.value = '';
            modelInput.addEventListener('click', function (e) {
                modelContainer.classList.remove('hidden');
                selectModel();
            });
        });
    });
}
function selectModel() {
    var suggestionsGot = document.querySelectorAll('.model-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            modelInput.value = e.target.innerHTML.trim();
            modelContainer.classList.add('hidden');
            var trims = [];
            fetch('/labels/get_trims', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ modelSelected: modelInput.value }),
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                trims.push.apply(trims, data.trims);
                trimContainer.innerHTML = '';
                trims.forEach(function (trim) {
                    var clonedTrimSuggestionParagraph = trimSuggestionP.cloneNode(true);
                    clonedTrimSuggestionParagraph.innerHTML = trim;
                    trimContainer.appendChild(clonedTrimSuggestionParagraph);
                });
                makeInput.value = data.make;
                makeWarning.classList.add('hidden');
                typeInput.value = data.type;
                selectTrim();
            })
                .catch(function (error) {
                console.error('Error fetching trims by model:', error);
            });
            modelInput.addEventListener('click', function (e) {
                modelContainer.classList.remove('hidden');
            });
        });
    });
}
function selectTrim() {
    var suggestionsGot = document.querySelectorAll('.trim-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            trimInput.value = e.target.innerHTML.trim();
            trimContainer.classList.add('hidden');
        });
    });
}
function selectType() {
    var suggestionsGot = document.querySelectorAll('.type-suggestion');
    suggestionsGot.forEach(function (suggestion) {
        suggestion.addEventListener('click', function (e) {
            typeInput.value = e.target.innerHTML.trim();
            typeContainer.classList.add('hidden');
        });
    });
}
if (makeInput) {
    makeInput.addEventListener('input', function (e) {
        var makes = [];
        fetch('/labels/get_makes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ makeTyped: e.target.value }),
        })
            .then(function (res) { return res.json(); })
            .then(function (data) {
            if (data.makes.length === 0) {
                makeInput.classList.add('text-indigo-500');
                makeWarning.classList.remove('hidden');
            }
            else {
                makeInput.classList.remove('text-indigo-500');
                makeWarning.classList.add('hidden');
                makes.push.apply(makes, data.makes);
                makeContainer.innerHTML = '';
                makes.forEach(function (make) {
                    var clonedMakeSuggestionParagraph = makeSuggestionP.cloneNode(true);
                    clonedMakeSuggestionParagraph.innerHTML = make;
                    makeContainer.appendChild(clonedMakeSuggestionParagraph);
                });
                selectMake();
            }
        })
            .catch(function (error) {
            console.error('Error sending makes data to Flask:', error);
        });
    });
}
makeInput.addEventListener('click', function (e) {
    makeContainer.classList.toggle('hidden');
});
modelInput.addEventListener('click', function (e) {
    modelContainer.classList.toggle('hidden');
});
trimInput.addEventListener('click', function (e) {
    trimContainer.classList.toggle('hidden');
});
typeInput.addEventListener('click', function (e) {
    typeContainer.classList.toggle('hidden');
});
if (modelInput) {
    modelInput.addEventListener('input', function (e) {
        var models = [];
        fetch('/labels/get_models', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ modelTyped: modelInput.value }),
        })
            .then(function (response) { return response.json(); })
            .then(function (data) {
            if (data.models.length === 0) {
                modelInput.classList.add('text-indigo-500');
                modelWarning.classList.remove('hidden');
            }
            else {
                modelInput.classList.remove('text-indigo-500');
                modelWarning.classList.add('hidden');
                models.push.apply(models, data.models);
                modelContainer.innerHTML = '';
                models.forEach(function (model) {
                    var clonedModelSuggestionParagraph = modelSuggestionP.cloneNode(true);
                    clonedModelSuggestionParagraph.innerHTML = model;
                    modelContainer.appendChild(clonedModelSuggestionParagraph);
                });
                selectModel();
            }
        })
            .catch(function (error) {
            console.error('Error fetching all models:', error);
        });
    });
}
selectMake();
selectModel();
selectTrim();
selectType();
var labelForm = document.querySelector('#label-form');
var codeInput = document.querySelector('#label-1-sticker-number');
var codeExistsError = document.querySelector('.sticker-code-exists-error');
var codeNotPendingError = document.querySelector('.sticker-code-not-pending-error');
var isPendingError = false;
var isExistsError = false;
if (codeInput) {
    codeInput.addEventListener('input', function (e) {
        fetch('/labels/check_label_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ codeTyped: codeInput.value }),
        })
            .then(function (response) { return response.json(); })
            .then(function (data) {
            if (data.pending === false) {
                codeNotPendingError.classList.remove('hidden');
                codeInput.classList.add('text-red-700');
                codeInput.classList.add('border-2');
                codeInput.classList.add('bg-red-100');
                codeInput.classList.add('focus:border-red-700');
                isPendingError = true;
            }
            else {
                codeNotPendingError.classList.add('hidden');
                codeInput.classList.remove('text-red-700');
                codeInput.classList.remove('border-2');
                codeInput.classList.remove('bg-red-100');
                codeInput.classList.remove('focus:border-red-700');
                isPendingError = false;
            }
            if (data.exists === true) {
                codeNotPendingError.classList.add('hidden');
                codeExistsError.classList.remove('hidden');
                codeInput.classList.add('text-red-700');
                codeInput.classList.add('border-2');
                codeInput.classList.add('bg-red-100');
                codeInput.classList.add('focus:border-red-700');
                isExistsError = true;
            }
            else {
                codeExistsError.classList.add('hidden');
                codeInput.classList.remove('text-red-700');
                codeInput.classList.remove('border-2');
                codeInput.classList.remove('bg-red-100');
                codeInput.classList.remove('focus:border-red-700');
                isExistsError = false;
            }
            labelForm.addEventListener('submit', function (e) {
                if (isExistsError) {
                    e.preventDefault();
                }
                if (isPendingError) {
                    e.preventDefault();
                }
            });
        })
            .catch(function (error) {
            console.error('Error fetching sticker number:', error);
        });
    });
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,