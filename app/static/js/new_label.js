(()=>{console.log("new_label.ts");var e=document.querySelectorAll(".suggestion-container");document.addEventListener("keydown",(function(n){"Escape"===n.key&&(console.log("Escape pressed"),e.forEach((function(e){e.classList.add("hidden")})))}));var n=document.querySelector(".make-container"),o=document.querySelector(".model-container"),t=document.querySelector(".trim-container");console.log("trimContainer",t);var c=document.querySelector("#make-1"),i=document.querySelector("#vehicle_model-1"),l=document.querySelector("#label-1-trim"),r=document.querySelector(".make-suggestion"),s=document.querySelector(".model-suggestion"),a=document.querySelector(".trim-suggestion");function d(){console.log("selectModel()"),document.querySelectorAll(".model-suggestion").forEach((function(e){e.addEventListener("click",(function(e){console.log("Model suggestion clicked",e.target.innerHTML),i.value=e.target.innerHTML.replace(/\s+/g,""),o.classList.add("hidden"),console.log("modelInput.value",i.value);var n=[];fetch("/labels/get_trims",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({modelSelected:i.value})}).then((function(e){return e.json()})).then((function(e){n.push.apply(n,e.trims),t.innerHTML="",n.forEach((function(e){var n=a.cloneNode(!0);n.innerHTML=e,t.appendChild(n)})),u()})).catch((function(e){console.error("Error fetching trims by model:",e)})),i.addEventListener("click",(function(e){o.classList.remove("hidden")}))}))}))}function u(){console.log("selectTrim()"),document.querySelectorAll(".trim-suggestion").forEach((function(e){e.addEventListener("click",(function(e){console.log("Trim suggestion clicked",e.target.innerHTML),l.value=e.target.innerHTML,t.classList.add("hidden"),console.log("trimInput.value",l.value)}))}))}c&&c.addEventListener("input",(function(e){var t=[];fetch("/labels/get_makes",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({makeTyped:e.target.value})}).then((function(e){return e.json()})).then((function(e){t.push.apply(t,e.makes),n.classList.remove("hidden"),n.innerHTML="",t.forEach((function(e){var o=r.cloneNode(!0);o.innerHTML=e,n.appendChild(o)})),document.querySelectorAll(".make-suggestion").forEach((function(e){e.addEventListener("click",(function(e){console.log("Make suggestion clicked",e.target.innerHTML),c.value=e.target.innerHTML,n.classList.add("hidden"),console.log("makeInput.value",c.value);var t=[];fetch("/labels/get_models",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({makeSelected:c.value})}).then((function(e){return e.json()})).then((function(e){t.push.apply(t,e.models),o.innerHTML="",t.forEach((function(e){var n=s.cloneNode(!0);n.innerHTML=e,o.appendChild(n)}))})).catch((function(e){console.error("Error fetching models by make:",e)})),i.addEventListener("click",(function(e){o.classList.remove("hidden"),d()}))}))}))})).catch((function(e){console.error("Error sending makes data to Flask:",e)}))})),c.addEventListener("click",(function(e){n.classList.toggle("hidden")})),i.addEventListener("click",(function(e){o.classList.toggle("hidden")})),l.addEventListener("click",(function(e){console.log("trimInput clicked"),t.classList.toggle("hidden")})),i&&i.addEventListener("input",(function(e){var n=[];fetch("/labels/get_models",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({modelTyped:i.value})}).then((function(e){return e.json()})).then((function(e){n.push.apply(n,e.models),o.innerHTML="",n.forEach((function(e){var n=s.cloneNode(!0);n.innerHTML=e,o.appendChild(n)})),console.log("before SelectModel()"),d()})).catch((function(e){console.error("Error fetching all models:",e)}))})),d(),u()})();