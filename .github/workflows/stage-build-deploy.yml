name: Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKER_LOGIN: simple2b
  PROJECT_IMAGE: simple2b/car-qr-label
  STAGE_HOST: ${{ secrets.SSH_HOST_IP }}
  STAGE_USERNAME: ${{ secrets.SSH_USER }}
  STAGE_SSH_KEY: ${{ secrets.SSH_KEY }}
  STAGE_PORT: ${{ secrets.SSH_PORT }}
  SITE_DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  on-develop-branch-check:
    runs-on: ubuntu-latest
    outputs:
      on_develop: ${{ steps.contains_tag.outputs.retval }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: rickstaa/action-contains-tag@v1
        id: contains_tag
        with:
          reference: 'develop'
          tag: '${{ github.ref }}'

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          pip install poetry==1.5.0

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install

      - name: Lint with flake8
        run: |
          poetry run flake8 . --count --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run pytest
        run: |
          poetry run pytest

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker meta
        id: project_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.PROJECT_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_LOGIN }}
          password: ${{ env.SITE_DOCKER_ACCESS_TOKEN }}
      - name: Build and Push CarQR image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.project_meta.outputs.tags }}
          labels: ${{ steps.project_meta.outputs.labels }}

  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs:
      - on-develop-branch-check
      - build
    if: ${{ needs.on-develop-branch-check.outputs.on_develop == 'true' }}
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose.dev.yaml to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.STAGE_HOST }}
          username: ${{ env.STAGE_USERNAME }}
          key: ${{ env.STAGE_SSH_KEY }}
          port: ${{ env.STAGE_PORT }}
          source: 'docker-compose.dev.yaml'
          target: '/home/runner/dev_qr_labels'

      - name: Set permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.STAGE_HOST }}
          username: ${{ env.STAGE_USERNAME }}
          key: ${{ env.STAGE_SSH_KEY }}
          port: ${{ env.STAGE_PORT }}
          script: |
            sudo chmod -R 775 /home/runner/dev_qr_labels &&
            sudo chown -R ${{ env.STAGE_USERNAME }} /home/runner/dev_qr_labels

      - name: Deploy dev_qr_labels
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.STAGE_HOST }}
          username: ${{ env.STAGE_USERNAME }}
          key: ${{ env.STAGE_SSH_KEY }}
          port: ${{ env.STAGE_PORT }}
          script: |
            cd /home/runner/dev_qr_labels &&
            mv docker-compose.dev.yaml docker-compose.yml &&
            sudo docker compose pull &&
            sudo docker compose up -d &&
            cd ../ &&
            sudo chown -R runner:runner dev_qr_labels
